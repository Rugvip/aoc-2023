import { utils } from './utils';

export namespace test {
  export type Expect<TActual, TExpected> = [
    pass: (<T>() => T extends TActual ? 1 : 2) extends <T>() => T extends TExpected ? 1 : 2
      ? true
      : false,
    actual: TActual,
    expected: TExpected,
  ];

  type TestResult<T extends boolean = boolean> = [pass: T, actual: any, expected: any];

  type OnlyFailingTests<T extends TestResult[], TChecked extends any[] = []> = T extends [
    [infer IR, ...infer IData],
    ...infer IRest extends TestResult[],
  ]
    ? IR extends false
      ? [[index: TChecked['length'], ...IData], ...OnlyFailingTests<IRest, [...TChecked, any]>]
      : OnlyFailingTests<IRest, [...TChecked, any]>
    : [];

  export type Describe<
    T1 extends TestResult<true> = TestResult<true>,
    T2 extends TestResult<true> = TestResult<true>,
    T3 extends TestResult<true> = TestResult<true>,
    T4 extends TestResult<true> = TestResult<true>,
    T5 extends TestResult<true> = TestResult<true>,
    T6 extends TestResult<true> = TestResult<true>,
    T7 extends TestResult<true> = TestResult<true>,
    T8 extends TestResult<true> = TestResult<true>,
    T9 extends TestResult<true> = TestResult<true>,
    T10 extends TestResult<true> = TestResult<true>,
    T11 extends TestResult<true> = TestResult<true>,
    T12 extends TestResult<true> = TestResult<true>,
    T13 extends TestResult<true> = TestResult<true>,
    T14 extends TestResult<true> = TestResult<true>,
    T15 extends TestResult<true> = TestResult<true>,
    T16 extends TestResult<true> = TestResult<true>,
    T17 extends TestResult<true> = TestResult<true>,
    T18 extends TestResult<true> = TestResult<true>,
    T19 extends TestResult<true> = TestResult<true>,
    T20 extends TestResult<true> = TestResult<true>,
    T21 extends TestResult<true> = TestResult<true>,
    T22 extends TestResult<true> = TestResult<true>,
    T23 extends TestResult<true> = TestResult<true>,
    T24 extends TestResult<true> = TestResult<true>,
    T25 extends TestResult<true> = TestResult<true>,
    T26 extends TestResult<true> = TestResult<true>,
    T27 extends TestResult<true> = TestResult<true>,
    T28 extends TestResult<true> = TestResult<true>,
    T29 extends TestResult<true> = TestResult<true>,
    T30 extends TestResult<true> = TestResult<true>,
    T31 extends TestResult<true> = TestResult<true>,
    T32 extends TestResult<true> = TestResult<true>,
    T33 extends TestResult<true> = TestResult<true>,
    T34 extends TestResult<true> = TestResult<true>,
    T35 extends TestResult<true> = TestResult<true>,
    T36 extends TestResult<true> = TestResult<true>,
    T37 extends TestResult<true> = TestResult<true>,
    T38 extends TestResult<true> = TestResult<true>,
    T39 extends TestResult<true> = TestResult<true>,
    T40 extends TestResult<true> = TestResult<true>,
    T41 extends TestResult<true> = TestResult<true>,
    T42 extends TestResult<true> = TestResult<true>,
    T43 extends TestResult<true> = TestResult<true>,
    T44 extends TestResult<true> = TestResult<true>,
    T45 extends TestResult<true> = TestResult<true>,
    T46 extends TestResult<true> = TestResult<true>,
    T47 extends TestResult<true> = TestResult<true>,
    T48 extends TestResult<true> = TestResult<true>,
    T49 extends TestResult<true> = TestResult<true>,
    T50 extends TestResult<true> = TestResult<true>,
  > = utils.ExpandRecursively<
    OnlyFailingTests<
      [
        T1,
        T2,
        T3,
        T4,
        T5,
        T6,
        T7,
        T8,
        T9,
        T10,
        T11,
        T12,
        T13,
        T14,
        T15,
        T16,
        T17,
        T18,
        T19,
        T20,
        T21,
        T22,
        T23,
        T24,
        T25,
        T26,
        T27,
        T28,
        T29,
        T30,
        T31,
        T32,
        T33,
        T34,
        T35,
        T36,
        T37,
        T38,
        T39,
        T40,
        T41,
        T42,
        T43,
        T44,
        T45,
        T46,
        T47,
        T48,
        T49,
        T50,
      ]
    >
  >;
}
